# frozen_string_literal: true
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/parent_objects", type: :request, prep_metadata_sources: true, prep_admin_sets: true do
  let(:user) { FactoryBot.create(:sysadmin_user) }
  # ParentObject. As you add validations to ParentObject, be sure to
  # adjust the attributes here as well.
  before do
    stub_metadata_cloud("2004628")
    login_as user
  end

  let(:valid_params) do
    {
      oid: "2004628",
      authoritative_metadata_source_id: 1,
      admin_set: 'brbl',
      visibility: "Private"
    }
  end

  let(:invalid_params) do
    {
      oid: "2004628",
      authoritative_metadata_source_id: 4,
      visibility: nil,
      admin_set: 'brbl'
    }
  end

  let(:valid_attributes) do
    {
      oid: "2004628",
      authoritative_metadata_source_id: 1,
      admin_set: AdminSet.find_by_key('brbl'),
      bib: "123"
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      ParentObject.create! valid_attributes
      get parent_objects_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      parent_object = ParentObject.create! valid_attributes
      get parent_object_url(parent_object)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_parent_object_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      parent_object = ParentObject.create! valid_attributes
      get edit_parent_object_url(parent_object)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ParentObject" do
        expect do
          post parent_objects_url, params: { parent_object: valid_params }
        end.to change(ParentObject, :count).by(1)
          .and change(BatchProcess, :count).by(1)
      end

      it "redirects to the created parent_object" do
        post parent_objects_url, params: { parent_object: valid_params }
        expect(response).to redirect_to(parent_object_url(ParentObject.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ParentObject" do
        expect do
          post parent_objects_url, params: { parent_object: invalid_params }
        end.to change(ParentObject, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post parent_objects_url, params: { parent_object: invalid_params }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          authoritative_metadata_source_id: 2,
          admin_set: 'brbl'
        }
      end

      it "updates the requested parent_object" do
        parent_object = ParentObject.create! valid_attributes
        patch parent_object_url(parent_object), params: { parent_object: new_attributes }
        parent_object.reload
        expect(parent_object.authoritative_metadata_source_id).to eq 2
      end

      it "queues metadata update after it updates parent_object" do
        parent_object = ParentObject.create! valid_attributes
        # rubocop:disable RSpec/AnyInstance
        expect_any_instance_of(ParentObjectsController).to receive(:queue_parent_metadata_update)
        # rubocop:enable RSpec/AnyInstance
        patch parent_object_url(parent_object), params: { parent_object: new_attributes }
        parent_object.reload
        expect(parent_object.authoritative_metadata_source_id).to eq 2
      end

      it "redirects to the parent_object" do
        parent_object = ParentObject.create! valid_attributes
        patch parent_object_url(parent_object), params: { parent_object: new_attributes }
        parent_object.reload
        expect(response).to redirect_to(parent_object_url(parent_object))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        parent_object = ParentObject.create! valid_attributes
        patch parent_object_url(parent_object), params: { parent_object: invalid_params }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested parent_object" do
      parent_object = ParentObject.create! valid_attributes
      expect do
        delete parent_object_url(parent_object)
      end.to change(ParentObject, :count).by(-1)
        .and change(BatchProcess, :count).by(0)
    end

    it "can still access the BatchProcess page" do
      parent_object = ParentObject.create! valid_attributes
      delete parent_object_url(parent_object)
      expect(get(batch_processes_url)).to eq 200
    end

    it "redirects to the parent_objects list" do
      parent_object = ParentObject.create! valid_attributes
      delete parent_object_url(parent_object)
      expect(response).to redirect_to(parent_objects_url)
    end
  end

  describe "#reindex" do
    it 'redirects to the parent_objects list' do
      post reindex_parent_objects_url
      expect(response).to redirect_to(parent_objects_url)
      expect(flash[:notice]).to eq('Parent objects have been reindexed.')
    end
  end

  describe "#all_metadata" do
    it 'redirects to the parent_objects list' do
      ParentObject.create! valid_attributes
      post all_metadata_parent_objects_url
      expect(response).to redirect_to(parent_objects_url)
      expect(flash[:notice]).to eq('Parent objects have been queued for metadata update.')
    end
  end

  describe '#update_metadata' do
    it 'redirects to the parent_objects list' do
      parent_object = ParentObject.create! valid_attributes
      post update_metadata_parent_object_url(parent_object)
      expect(response).to redirect_to(parent_object_url(parent_object))
      expect(flash[:notice]).to eq('This object has been queued for a metadata update.')
    end
  end

  describe '#minify' do
    let(:redirect_attributes) do
      {
        redirect_to: 'https://collections.library.yale.edu/catalog/123'
      }
    end

    let(:invalid_redirect_params) do
      {
        redirect_to: 'https://collections.library.yale.educcccatalog/123'
      }
    end

    it 'reduces the parent record to a smaller record' do
      parent_object = ParentObject.create! valid_attributes
      expect(parent_object.bib).to eq("123")
      patch parent_object_url(parent_object), params: { parent_object: redirect_attributes }
      parent_object.reload
      expect(parent_object.bib).to be_nil
      expect(parent_object.visibility).to eq 'Redirect'
      expect(parent_object.admin_set.key).to eq 'brbl'
      expect(parent_object.redirect_to).to eq 'https://collections.library.yale.edu/catalog/123'
    end

    it 'redirects to the parent show page' do
      parent_object = ParentObject.create! valid_attributes
      patch parent_object_url(parent_object), params: { parent_object: redirect_attributes }
      parent_object.reload
      expect(response).to redirect_to(parent_object_url(parent_object))
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        parent_object = ParentObject.create! valid_attributes
        patch parent_object_url(parent_object), params: { parent_object: invalid_redirect_params }
        expect(response).to be_successful
      end
    end
  end

  context 'without sys admin privileges' do
    let(:user) { FactoryBot.create(:user) }
    before do
      login_as user
    end

    describe '#reindex' do
      it 'is not allowed' do
        post reindex_parent_objects_url
        expect(response).to have_http_status(:unauthorized)
      end
    end

    describe "#all_metadata" do
      it 'is not allowed' do
        post all_metadata_parent_objects_url
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end
end
