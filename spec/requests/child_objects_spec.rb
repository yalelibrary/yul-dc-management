# frozen_string_literal: true
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/child_objects", type: :request, prep_metadata_sources: true do
  let(:user) { FactoryBot.create(:user) }
  # ChildObject. As you add validations to ChildObject, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      oid: "12345",
      parent_object_oid: "2004628"
    }
  end

  let(:invalid_attributes) do
    {
      oid: "12345",
      parent_object_oid: "6789"
    }
  end

  let(:parent_object) { FactoryBot.create(:parent_object, oid: "2004628") }

  before do
    stub_metadata_cloud("2004628")
    stub_ptiffs
    parent_object
    login_as user
  end

  describe "GET /index" do
    it "renders a successful response" do
      ChildObject.create! valid_attributes
      get child_objects_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      child_object = ChildObject.create! valid_attributes
      get child_object_url(child_object)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_child_object_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      child_object = ChildObject.create! valid_attributes
      get edit_child_object_url(child_object)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ChildObject" do
        expect do
          post child_objects_url, params: { child_object: valid_attributes }
        end.to change(ChildObject, :count).by(1)
      end

      it "redirects to the created child_object" do
        post child_objects_url, params: { child_object: valid_attributes }
        expect(response).to redirect_to(child_object_url(ChildObject.order("created_at ASC").last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ChildObject" do
        expect do
          post child_objects_url, params: { child_object: invalid_attributes }
        end.to change(ChildObject, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post child_objects_url, params: { child_object: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          order: 15
        }
      end

      it "updates the requested child_object" do
        child_object = ChildObject.create! valid_attributes
        patch child_object_url(child_object), params: { child_object: new_attributes }
        child_object.reload
        expect(child_object.order).to eq 15
      end

      it "redirects to the child_object" do
        child_object = ChildObject.create! valid_attributes
        patch child_object_url(child_object), params: { child_object: new_attributes }
        child_object.reload
        expect(response).to redirect_to(child_object_url(child_object))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        child_object = ChildObject.create! valid_attributes
        patch child_object_url(child_object), params: { child_object: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested child_object" do
      child_object = ChildObject.create! valid_attributes
      expect do
        delete child_object_url(child_object)
      end.to change(ChildObject, :count).by(-1)
    end

    it "redirects to the child_objects list" do
      child_object = ChildObject.create! valid_attributes
      delete child_object_url(child_object)
      expect(response).to redirect_to(child_objects_url)
    end
  end
end
